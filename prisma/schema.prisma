generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Post {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    postId    String   @unique
    title     String
    subreddit String
    author    String
    name      String
    permalink String
    selftext  String
    created   Int
    score     Int
    archived  Boolean
    Story     Story?   @relation(fields: [storyId], references: [id])
    storyId   String?  @db.ObjectId
    chapter   Int?
    sorted    Sorted
    Users     User[]   @relation(fields: [userIds], references: [id])
    userIds   String[] @db.ObjectId
}

enum Sorted {
    GPTSORTED
    SORTED
    NOTSORTED
}

model Story {
    id       String   @id @default(auto()) @map("_id") @db.ObjectId
    author   String?
    title    String   @unique
    chapters Post[]
    users    User[]   @relation(fields: [userIds], references: [id])
    userIds  String[] @db.ObjectId
}

model User {
    id                   String    @id @default(auto()) @map("_id") @db.ObjectId
    email                String?
    emailVerified        DateTime?
    name                 String    @unique
    image                String?
    createdAt            DateTime  @default(now())
    updatedAt            DateTime  @updatedAt
    accounts             Account[]
    sessions             Session[]
    subscribedStories    Story[]   @relation(fields: [subscribedStoriesIds], references: [id])
    subscribedStoriesIds String[]  @db.ObjectId
    readPosts            Post[]    @relation(fields: [readPostsIds], references: [id])
    readPostsIds         String[]  @db.ObjectId
    role                 UserRole  @default(USER)
}

enum UserRole {
    ADMIN
    MOD
    USER
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}
